{
  "alerts": [
    {
      "url": "http://localhost:5503",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/robots.txt",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/sitemap.xml",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/robots.txt",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/sitemap.xml",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/.well-known/security.txt",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/crossdomain.xml",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/manifest.json",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/clientaccesspolicy.xml",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/.well-known/security.txt",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/crossdomain.xml",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/humans.txt",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/manifest.json",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/clientaccesspolicy.xml",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/humans.txt",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/package.json",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/package.json",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/package.json",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/package.json",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/.well-known",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/.well-known",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react.js?v=2c498bac",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@id/__x00__react/jsx-dev-runtime",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/chunk-FAW2VN4A.js?v=2c498bac",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/get_chat_rooms",
      "name": "Application Error Disclosure",
      "alert": "Application Error Disclosure",
      "risk": "Low",
      "confidence": "Medium",
      "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.",
      "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
      "reference": "",
      "evidence": "HTTP/1.1 500 Internal Server Error",
      "cwe_id": "550",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "HTTP/1.1 500 Internal Server Error",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            34
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/vite/dist/client/env.mjs",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@id/__x00__react/jsx-dev-runtime",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/favicon.ico",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react.js?v=2c498bac",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/chunk-FAW2VN4A.js?v=2c498bac",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/get_chat_rooms",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react.js?v=2c498bac",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/favicon.ico",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@id/__x00__react/jsx-dev-runtime",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/vite/dist/client/env.mjs",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/src/App.jsx",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/get_chat_rooms",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@react-refresh",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/chunk-FAW2VN4A.js?v=2c498bac",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/vite/dist/client/env.mjs",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react.js?v=2c498bac",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@react-refresh",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@react-refresh",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/src/App.jsx",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/src/App.jsx",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@id/__x00__react/jsx-dev-runtime",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=2c498bac",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/",
      "name": "Modern Web Application",
      "alert": "Modern Web Application",
      "risk": "Informational",
      "confidence": "Medium",
      "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
      "solution": "This is an informational alert and so no changes are required.",
      "reference": "",
      "evidence": "<script type=\"module\">\nimport RefreshRuntime from \"/@react-refresh\"\nRefreshRuntime.injectIntoGlobalHook(window)\nwindow.$RefreshReg$ = () => {}\nwindow.$RefreshSig$ = () => (type) => type\nwindow.__vite_plugin_react_preamble_installed__ = true\n</script>",
      "cwe_id": "-1",
      "parameter": "",
      "attack": "",
      "wascid": "-1",
      "affected_code": {
        "snippet": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <script type=\"module\">\nimport RefreshRuntime from \"/@react-refresh\"\nRefreshRuntime.injectIntoGlobalHook(window)\nwindow.$RefreshReg$ = () => {}\nwindow.$RefreshSig$ = () => (type) => type\nwindow.__vite_plugin_react_preamble_installed__ = true",
        "line_number": 4,
        "file_path": null,
        "start_line": 1,
        "end_line": 9,
        "vulnerable_lines": [
          4
        ],
        "highlight_positions": [
          [
            48,
            286
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@react-refresh",
      "name": "Information Disclosure - Suspicious Comments",
      "alert": "Information Disclosure - Suspicious Comments",
      "risk": "Informational",
      "confidence": "Low",
      "description": "The response appears to contain suspicious comments which may help an attacker.",
      "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
      "reference": "",
      "evidence": "TODO",
      "cwe_id": "615",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "      if (canPreserveStateBetween(prevType, nextType)) {\n        updatedFamilies.add(family);\n      } else {\n        staleFamilies.add(family);\n      }\n    }); // TODO: rename these fields to something more meaningful.\n\n    var update = {\n      updatedFamilies: updatedFamilies,\n      // Families that will re-render preserving state\n      staleFamilies: staleFamilies // Families that will be remounted",
        "line_number": 204,
        "file_path": null,
        "start_line": 199,
        "end_line": 209,
        "vulnerable_lines": [
          204
        ],
        "highlight_positions": [
          [
            163,
            167
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/chunk-FAW2VN4A.js?v=2c498bac",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/vite/dist/client/env.mjs",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=2c498bac",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/src/App.jsx",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=2c498bac",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@vite/client",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@react-refresh",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/axios.js?v=2c498bac",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/chunk-SAOJIHTQ.js?v=2c498bac",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=2c498bac",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@vite/client",
      "name": "Application Error Disclosure",
      "alert": "Application Error Disclosure",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.",
      "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
      "reference": "",
      "evidence": "Internal Server Error",
      "cwe_id": "550",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "            const err = payload.err;\n            if (enableOverlay) {\n                createErrorOverlay(err);\n            }\n            else {\n                console.error(`[vite] Internal Server Error\\n${err.message}\\n${err.stack}`);\n            }\n            break;\n        }\n        default: {\n            const check = payload;",
        "line_number": 388,
        "file_path": null,
        "start_line": 383,
        "end_line": 393,
        "vulnerable_lines": [
          388
        ],
        "highlight_positions": [
          [
            182,
            203
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@vite/client",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@vite/client",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@vite/client",
      "name": "Information Disclosure - Debug Error Messages",
      "alert": "Information Disclosure - Debug Error Messages",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The response appeared to contain common error messages returned by platforms such as ASP.NET, and Web-servers such as IIS and Apache. You can configure the list of common debug messages.",
      "solution": "Disable debugging messages before pushing to production.",
      "reference": "",
      "evidence": "Internal Server Error",
      "cwe_id": "1295",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "            const err = payload.err;\n            if (enableOverlay) {\n                createErrorOverlay(err);\n            }\n            else {\n                console.error(`[vite] Internal Server Error\\n${err.message}\\n${err.stack}`);\n            }\n            break;\n        }\n        default: {\n            const check = payload;",
        "line_number": 388,
        "file_path": null,
        "start_line": 383,
        "end_line": 393,
        "vulnerable_lines": [
          388
        ],
        "highlight_positions": [
          [
            182,
            203
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@vite/client",
      "name": "Information Disclosure - Suspicious Comments",
      "alert": "Information Disclosure - Suspicious Comments",
      "risk": "Informational",
      "confidence": "Low",
      "description": "The response appears to contain suspicious comments which may help an attacker.",
      "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
      "reference": "",
      "evidence": "where",
      "cwe_id": "615",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "  </div>\n</div>\n`;\nconst fileRE = /(?:[a-zA-Z]:\\\\|\\/).*?:\\d+:\\d+/g;\nconst codeframeRE = /^(?:>?\\s+\\d+\\s+\\|.*|\\s+\\|\\s*\\^.*)\\r?\\n/gm;\n// Allow `ErrorOverlay` to extend `HTMLElement` even in environments where\n// `HTMLElement` was not originally defined.\nconst { HTMLElement = class {\n} } = globalThis;\nclass ErrorOverlay extends HTMLElement {\n    constructor(err, links = true) {",
        "line_number": 131,
        "file_path": null,
        "start_line": 126,
        "end_line": 136,
        "vulnerable_lines": [
          131
        ],
        "highlight_positions": [
          [
            201,
            206
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/chunk-SAOJIHTQ.js?v=2c498bac",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/axios.js?v=2c498bac",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/chunk-SAOJIHTQ.js?v=2c498bac",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/axios.js?v=2c498bac",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/@vite/client",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/chunk-SAOJIHTQ.js?v=2c498bac",
      "name": "Information Disclosure - Suspicious Comments",
      "alert": "Information Disclosure - Suspicious Comments",
      "risk": "Informational",
      "confidence": "Low",
      "description": "The response appears to contain suspicious comments which may help an attacker.",
      "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
      "reference": "",
      "evidence": "debug",
      "cwe_id": "615",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "        }\n        function resolveDispatcher() {\n          var dispatcher = ReactCurrentDispatcher.current;\n          {\n            if (dispatcher === null) {\n              error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n            }\n          }\n          return dispatcher;\n        }\n        function useContext(Context) {",
        "line_number": 965,
        "file_path": null,
        "start_line": 960,
        "end_line": 970,
        "vulnerable_lines": [
          965
        ],
        "highlight_positions": [
          [
            584,
            589
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/axios.js?v=2c498bac",
      "name": "Information Disclosure - Suspicious Comments",
      "alert": "Information Disclosure - Suspicious Comments",
      "risk": "Informational",
      "confidence": "Low",
      "description": "The response appears to contain suspicious comments which may help an attacker.",
      "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
      "reference": "",
      "evidence": "user",
      "cwe_id": "615",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "  \"location\",\n  \"max-forwards\",\n  \"proxy-authorization\",\n  \"referer\",\n  \"retry-after\",\n  \"user-agent\"\n]);\nvar parseHeaders_default = (rawHeaders) => {\n  const parsed = {};\n  let key;\n  let val;",
        "line_number": 903,
        "file_path": null,
        "start_line": 898,
        "end_line": 908,
        "vulnerable_lines": [
          903
        ],
        "highlight_positions": [
          [
            90,
            94
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/chunk-SAOJIHTQ.js?v=2c498bac",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/axios.js?v=2c498bac",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react-dom_client.js?v=2c498bac",
      "name": "Missing Anti-clickjacking Header",
      "alert": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "evidence": "",
      "cwe_id": "1021",
      "parameter": "x-frame-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react-dom_client.js?v=2c498bac",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react-dom_client.js?v=2c498bac",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react-dom_client.js?v=2c498bac",
      "name": "Information Disclosure - Suspicious Comments",
      "alert": "Information Disclosure - Suspicious Comments",
      "risk": "Informational",
      "confidence": "Low",
      "description": "The response appears to contain suspicious comments which may help an attacker.",
      "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
      "reference": "",
      "evidence": "debug",
      "cwe_id": "615",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_SCOPE_TYPE = Symbol.for(\"react.scope\");\n        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\"react.debug_trace_mode\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for(\"react.legacy_hidden\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var REACT_TRACING_MARKER_TYPE = Symbol.for(\"react.tracing_marker\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;",
        "line_number": 1208,
        "file_path": null,
        "start_line": 1203,
        "end_line": 1213,
        "vulnerable_lines": [
          1208
        ],
        "highlight_positions": [
          [
            370,
            375
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react-dom_client.js?v=2c498bac",
      "name": "Timestamp Disclosure - Unix",
      "alert": "Timestamp Disclosure - Unix",
      "risk": "Low",
      "confidence": "Low",
      "description": "A timestamp was disclosed by the application/web server. - Unix",
      "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
      "reference": "https://cwe.mitre.org/data/definitions/200.html",
      "evidence": "1073741823",
      "cwe_id": "497",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "          var initialTime = localDate.now();\n          exports.unstable_now = function() {\n            return localDate.now() - initialTime;\n          };\n        }\n        var maxSigned31BitInt = 1073741823;\n        var IMMEDIATE_PRIORITY_TIMEOUT = -1;\n        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;\n        var NORMAL_PRIORITY_TIMEOUT = 5e3;\n        var LOW_PRIORITY_TIMEOUT = 1e4;\n        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;",
        "line_number": 107,
        "file_path": null,
        "start_line": 102,
        "end_line": 112,
        "vulnerable_lines": [
          107
        ],
        "highlight_positions": [
          [
            196,
            206
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react-dom_client.js?v=2c498bac",
      "name": "Timestamp Disclosure - Unix",
      "alert": "Timestamp Disclosure - Unix",
      "risk": "Low",
      "confidence": "Low",
      "description": "A timestamp was disclosed by the application/web server. - Unix",
      "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
      "reference": "https://cwe.mitre.org/data/definitions/200.html",
      "evidence": "1073741824",
      "cwe_id": "497",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "        var SomeRetryLane = RetryLane1;\n        var SelectiveHydrationLane = 134217728;\n        var NonIdleLanes = 268435455;\n        var IdleHydrationLane = 268435456;\n        var IdleLane = 536870912;\n        var OffscreenLane = 1073741824;\n        function getLabelForLane(lane) {\n          {\n            if (lane & SyncLane) {\n              return \"Sync\";\n            }",
        "line_number": 4296,
        "file_path": null,
        "start_line": 4291,
        "end_line": 4301,
        "vulnerable_lines": [
          4296
        ],
        "highlight_positions": [
          [
            231,
            241
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react-dom_client.js?v=2c498bac",
      "name": "X-Content-Type-Options Header Missing",
      "alert": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "confidence": "Medium",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "x-content-type-options",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/login",
      "name": "Application Error Disclosure",
      "alert": "Application Error Disclosure",
      "risk": "Low",
      "confidence": "Medium",
      "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.",
      "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
      "reference": "",
      "evidence": "HTTP/1.1 500 Internal Server Error",
      "cwe_id": "550",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "HTTP/1.1 500 Internal Server Error",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            34
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/login",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/login",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/logout",
      "name": "Application Error Disclosure",
      "alert": "Application Error Disclosure",
      "risk": "Low",
      "confidence": "Medium",
      "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.",
      "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
      "reference": "",
      "evidence": "HTTP/1.1 500 Internal Server Error",
      "cwe_id": "550",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "HTTP/1.1 500 Internal Server Error",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            34
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/logout",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/logout",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/send_message",
      "name": "Application Error Disclosure",
      "alert": "Application Error Disclosure",
      "risk": "Low",
      "confidence": "Medium",
      "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.",
      "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
      "reference": "",
      "evidence": "HTTP/1.1 500 Internal Server Error",
      "cwe_id": "550",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "HTTP/1.1 500 Internal Server Error",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            34
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/send_message",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/send_message",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/get_messages",
      "name": "Application Error Disclosure",
      "alert": "Application Error Disclosure",
      "risk": "Low",
      "confidence": "Medium",
      "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.",
      "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
      "reference": "",
      "evidence": "HTTP/1.1 500 Internal Server Error",
      "cwe_id": "550",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "HTTP/1.1 500 Internal Server Error",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            34
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/get_messages",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/get_messages",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/create_chat_room",
      "name": "Application Error Disclosure",
      "alert": "Application Error Disclosure",
      "risk": "Low",
      "confidence": "Medium",
      "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.",
      "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
      "reference": "",
      "evidence": "HTTP/1.1 500 Internal Server Error",
      "cwe_id": "550",
      "parameter": "",
      "attack": "",
      "wascid": "13",
      "affected_code": {
        "snippet": "HTTP/1.1 500 Internal Server Error",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            34
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/create_chat_room",
      "name": "Content Security Policy (CSP) Header Not Set",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "confidence": "High",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "evidence": "",
      "cwe_id": "693",
      "parameter": "",
      "attack": "",
      "wascid": "15",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/api/create_chat_room",
      "name": "Cross-Domain Misconfiguration",
      "alert": "Cross-Domain Misconfiguration",
      "risk": "Medium",
      "confidence": "Medium",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "solution": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "reference": "https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "evidence": "Access-Control-Allow-Origin: *",
      "cwe_id": "264",
      "parameter": "",
      "attack": "",
      "wascid": "14",
      "affected_code": {
        "snippet": "Access-Control-Allow-Origin: *",
        "line_number": null,
        "file_path": null,
        "start_line": 0,
        "end_line": 0,
        "vulnerable_lines": [],
        "highlight_positions": [
          [
            0,
            30
          ]
        ]
      },
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/chunk-FAW2VN4A.js?v=%2Fchunk-FAW2VN4A.js",
      "name": "Obchodzenie \u015acie\u017cki",
      "alert": "Obchodzenie \u015acie\u017cki",
      "risk": "High",
      "confidence": "Low",
      "description": "Technika ataku Obchodzenie \u015acie\u017cki / Path Traversal umo\u017cliwia atakuj\u0105cemu dost\u0119p do plik\u00f3w, katalog\u00f3w i polece\u0144, kt\u00f3re potencjalnie znajduj\u0105 si\u0119 poza g\u0142\u00f3wnym katalogiem dokument\u00f3w internetowych. Osoba atakuj\u0105ca mo\u017ce manipulowa\u0107 adresem URL w taki spos\u00f3b, \u017ce strona internetowa b\u0119dzie wykonywa\u0107 lub ujawnia\u0107 zawarto\u015b\u0107 dowolnych plik\u00f3w w dowolnym miejscu na serwerze sieciowym. Ka\u017cde urz\u0105dzenie, kt\u00f3re udost\u0119pnia interfejs oparty na HTTP, jest potencjalnie nara\u017cone na dzia\u0142anie ataku Path Traversal.\n\nWi\u0119kszo\u015b\u0107 witryn internetowych ogranicza dost\u0119p u\u017cytkownika do okre\u015blonej cz\u0119\u015bci systemu plik\u00f3w, zwykle nazywanej katalogiem \"katalog g\u0142\u00f3wny dokumentu sieciowego\" lub \"katalog g\u0142\u00f3wny CGI\". Katalogi te zawieraj\u0105 pliki przeznaczone do uzyskiwania dost\u0119pu przez u\u017cytkownika oraz plik wykonywalny niezb\u0119dny do sterowania funkcjami aplikacji internetowych. Aby uzyska\u0107 dost\u0119p do plik\u00f3w lub wykonywa\u0107 polecenia w dowolnym miejscu systemu plik\u00f3w, ataki Obchodzenia \u015acie\u017cki b\u0119d\u0105 wykorzystywa\u0107 cechy sekwencji znak\u00f3w specjalnych.\n\nNajbardziej podstawowy atak Obchodzenia \u015acie\u017cki wykorzystuje sekwencj\u0119 znak\u00f3w specjalnych \"../\" w celu zmiany \u017c\u0105danej lokalizacji zasobu w adresie URL. Chocia\u017c najpopularniejsze serwery internetowe zapobiegn\u0105 wyj\u015bciu z g\u0142\u00f3wnego katalogu dokument\u00f3w internetowych, alternatywne kodowanie sekwencji \"../\" mo\u017ce pom\u00f3c omin\u0105\u0107 filtry bezpiecze\u0144stwa. Te odmiany metod zawieraj\u0105 poprawne i niepoprawne kodowanie Unicode (\"..%u2216\" lub \"..%c0%af\") znaku uko\u015bnika, znak\u00f3w uko\u015bnika odwrotnego (\"..\\\") na serwerach Windows, zakodowanych w adresach URL znaki \"%2e%2e%2f\") i podw\u00f3jne kodowanie URL (\"..%255c\") znaku uko\u015bnika odwrotnego.\n\nNawet je\u015bli serwer sieciowy w\u0142a\u015bciwie ograniczy pr\u00f3by Obej\u015bcia \u015acie\u017cki w \u015bcie\u017cce adresu URL, sama aplikacja internetowa mo\u017ce nadal by\u0107 podatna z powodu niew\u0142a\u015bciwej obs\u0142ugi danych wprowadzanych przez u\u017cytkownika. Jest to powszechny problem aplikacji internetowych, kt\u00f3re korzystaj\u0105 z mechanizm\u00f3w szablon\u00f3w lub \u0142aduj\u0105 tekst statyczny z plik\u00f3w. W odmianach tego ataku, oryginalna warto\u015b\u0107 parametru adresu URL jest zast\u0119powana nazw\u0105 pliku jednego ze skrypt\u00f3w dynamicznych aplikacji WWW. W rezultacie wyniki mog\u0105 ujawni\u0107 kod \u017ar\u00f3d\u0142owy, poniewa\u017c plik jest interpretowany jako tekst, a nie skrypt wykonywalny. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.",
      "solution": "Zak\u0142adaj, \u017ce wszystkie dane wej\u015bciowe s\u0105 szkodliwe. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Odrzucaj wszystkie dane wej\u015bciowe, kt\u00f3re nie s\u0105 \u015bci\u015ble dopasowane ze specyfikacjami lub przeobra\u017a je w takie, kt\u00f3re s\u0105 dopasowane. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nKiedy przeprowadzasz weryfikacj\u0119 danych wej\u015bciowych, bierz pod uwag\u0119 wszystkie potencjalnie wa\u017cne w\u0142a\u015bciwo\u015bci, w\u0142\u0105czaj\u0105c d\u0142ugo\u015b\u0107, pe\u0142ny zasi\u0119g akceptowalnych warto\u015bci, brakuj\u0105cych lub dodatkowych danych wej\u015bciowych, zgodno\u015b\u0107 poprzez wa\u017cne pola i dostosowanie si\u0119 do zasad sprawy. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nFor filenames, use stringent allow lists that limit the character set to be used. Je\u015bli to mo\u017cliwe, zezw\u00f3l tylko na pojedynczy \".\" znak w nazwie pliku, aby unikn\u0105\u0107 s\u0142abo\u015bci i wykluczy\u0107 separatory katalog\u00f3w, takie jak \"/\". Use an allow list of allowable file extensions.\n\nUwaga je\u015bli pr\u00f3bujesz oczy\u015bci\u0107 dane, zr\u00f3b tak, aby efekt ko\u0144cowy nie by\u0142 w formie, kt\u00f3ra mo\u017ce by\u0107 niebezpieczna. Mechanizm dezynfekcji mo\u017ce usuwa\u0107 znaki takie jak \".\" i ';' , kt\u00f3re mog\u0105 by\u0107 wymagane w przypadku niekt\u00f3rych podatno\u015bci. Osoba atakuj\u0105ca mo\u017ce pr\u00f3bowa\u0107 oszuka\u0107 mechanizm czyszcz\u0105cy w celu \"oczyszczenia\" danych do niebezpiecznej formy. Za\u0142\u00f3\u017cmy, \u017ce atakuj\u0105cy wstrzykuje \".\" wewn\u0105trz nazwy pliku (np. \"sensi.tiveFile\") i mechanizm sanityzacji usuwa znak, kt\u00f3ry daje prawid\u0142ow\u0105 nazw\u0119 pliku \"sensitiveFile\". Je\u015bli dane wej\u015bciowe zostan\u0105 teraz uznane za bezpieczne, plik mo\u017ce zosta\u0107 naruszony. \n\nDane wej\u015bciowe powinny by\u0107 dekodowane i kanonizowane do bie\u017c\u0105cej wewn\u0119trznej reprezentacji przed weryfikacj\u0105. Upewnij si\u0119, \u017ce twoja aplikacja nie dekoduje tego samego wej\u015bcia dwukrotnie. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.\n\nU\u017cyj wbudowanej funkcji kanonizacji \u015bcie\u017cki (takiej jak realpath() w C), kt\u00f3ra produkuje kanoniczn\u0105 wersj\u0119 nazwy \u015bcie\u017cki, kt\u00f3ra skutecznie usuwa sekwencje \"..\" i dowi\u0105zania symboliczne.\n\nUruchom sw\u00f3j kod u\u017cywaj\u0105c najmniejszych przywilej\u00f3w, kt\u00f3re s\u0105 wymagane do wykonania koniecznych zada\u0144. Je\u015bli mo\u017cliwe, utw\u00f3rz odizolowane konta z limitowanymi przywilejami, kt\u00f3re s\u0105 u\u017cywane tylko do pojedynczych zada\u0144. T\u0105 drog\u0105, skuteczny atak nie da gwa\u0142townie dost\u0119pu do reszty oprogramowania lub jego \u015brodowiska. Na przyk\u0142ad, baza danych aplikacji rzadko musi uruchomi\u0107 baz\u0119 danych administratora zw\u0142aszcza w codziennych operacjach.\n\nKiedy zbi\u00f3r akceptowalnych obiekt\u00f3w, takich jak nazwy plik\u00f3w lub adresy URL, jest ograniczony lub znany, utw\u00f3rz odwzorowanie ze zbioru sta\u0142ych warto\u015bci wej\u015bciowych (takich jak identyfikatory numeryczne) do rzeczywistych nazw plik\u00f3w lub adres\u00f3w URL i odrzu\u0107 wszystkie inne dane wej\u015bciowe.\n\nUruchom sw\u00f3j kod w \u015brodowisku \"wi\u0119zienia\" lub podobnym \u015brodowisku piaskownicy, kt\u00f3re wymusza \u015bcis\u0142e granice mi\u0119dzy procesem a systemem operacyjnym. Mo\u017ce to skutecznie ograniczy\u0107, kt\u00f3re pliki mog\u0105 by\u0107 dost\u0119pne w okre\u015blonym katalogu lub kt\u00f3re polecenia mog\u0105 by\u0107 wykonywane przez twoje oprogramowanie.\n\nPrzyk\u0142ady poziomu OS obejmuj\u0105ce Unix chroot jail, AppArmor, and SELinux. Na zasadach og\u00f3lnych, zarz\u0105dzany kod mo\u017ce zapewni\u0107 pewn\u0105 ochron\u0119. Na przyk\u0142ad,, java.io.FilePermission w Menad\u017cerze Ochrony Javy umo\u017cliwia ci sprecyzowa\u0107 ograniczenia odno\u015bnie operacji na plikach.\n\nTo mo\u017ce nie by\u0107 wykonalne rozwi\u0105zanie i ogranicza wp\u0142yw tylko na system operacyjny; reszta aplikacji mo\u017ce wci\u0105\u017c by\u0107 podatna na zagro\u017cenie.\n",
      "reference": "https://owasp.org/www-community/attacks/Path_Traversal\nhttps://cwe.mitre.org/data/definitions/22.html",
      "evidence": "",
      "cwe_id": "22",
      "parameter": "v",
      "attack": "/chunk-FAW2VN4A.js",
      "wascid": "33",
      "affected_code": null,
      "source_file": null
    },
    {
      "url": "http://localhost:5503/node_modules/.vite/deps/react.js?v=%2Freact.js",
      "name": "Obchodzenie \u015acie\u017cki",
      "alert": "Obchodzenie \u015acie\u017cki",
      "risk": "High",
      "confidence": "Low",
      "description": "Technika ataku Obchodzenie \u015acie\u017cki / Path Traversal umo\u017cliwia atakuj\u0105cemu dost\u0119p do plik\u00f3w, katalog\u00f3w i polece\u0144, kt\u00f3re potencjalnie znajduj\u0105 si\u0119 poza g\u0142\u00f3wnym katalogiem dokument\u00f3w internetowych. Osoba atakuj\u0105ca mo\u017ce manipulowa\u0107 adresem URL w taki spos\u00f3b, \u017ce strona internetowa b\u0119dzie wykonywa\u0107 lub ujawnia\u0107 zawarto\u015b\u0107 dowolnych plik\u00f3w w dowolnym miejscu na serwerze sieciowym. Ka\u017cde urz\u0105dzenie, kt\u00f3re udost\u0119pnia interfejs oparty na HTTP, jest potencjalnie nara\u017cone na dzia\u0142anie ataku Path Traversal.\n\nWi\u0119kszo\u015b\u0107 witryn internetowych ogranicza dost\u0119p u\u017cytkownika do okre\u015blonej cz\u0119\u015bci systemu plik\u00f3w, zwykle nazywanej katalogiem \"katalog g\u0142\u00f3wny dokumentu sieciowego\" lub \"katalog g\u0142\u00f3wny CGI\". Katalogi te zawieraj\u0105 pliki przeznaczone do uzyskiwania dost\u0119pu przez u\u017cytkownika oraz plik wykonywalny niezb\u0119dny do sterowania funkcjami aplikacji internetowych. Aby uzyska\u0107 dost\u0119p do plik\u00f3w lub wykonywa\u0107 polecenia w dowolnym miejscu systemu plik\u00f3w, ataki Obchodzenia \u015acie\u017cki b\u0119d\u0105 wykorzystywa\u0107 cechy sekwencji znak\u00f3w specjalnych.\n\nNajbardziej podstawowy atak Obchodzenia \u015acie\u017cki wykorzystuje sekwencj\u0119 znak\u00f3w specjalnych \"../\" w celu zmiany \u017c\u0105danej lokalizacji zasobu w adresie URL. Chocia\u017c najpopularniejsze serwery internetowe zapobiegn\u0105 wyj\u015bciu z g\u0142\u00f3wnego katalogu dokument\u00f3w internetowych, alternatywne kodowanie sekwencji \"../\" mo\u017ce pom\u00f3c omin\u0105\u0107 filtry bezpiecze\u0144stwa. Te odmiany metod zawieraj\u0105 poprawne i niepoprawne kodowanie Unicode (\"..%u2216\" lub \"..%c0%af\") znaku uko\u015bnika, znak\u00f3w uko\u015bnika odwrotnego (\"..\\\") na serwerach Windows, zakodowanych w adresach URL znaki \"%2e%2e%2f\") i podw\u00f3jne kodowanie URL (\"..%255c\") znaku uko\u015bnika odwrotnego.\n\nNawet je\u015bli serwer sieciowy w\u0142a\u015bciwie ograniczy pr\u00f3by Obej\u015bcia \u015acie\u017cki w \u015bcie\u017cce adresu URL, sama aplikacja internetowa mo\u017ce nadal by\u0107 podatna z powodu niew\u0142a\u015bciwej obs\u0142ugi danych wprowadzanych przez u\u017cytkownika. Jest to powszechny problem aplikacji internetowych, kt\u00f3re korzystaj\u0105 z mechanizm\u00f3w szablon\u00f3w lub \u0142aduj\u0105 tekst statyczny z plik\u00f3w. W odmianach tego ataku, oryginalna warto\u015b\u0107 parametru adresu URL jest zast\u0119powana nazw\u0105 pliku jednego ze skrypt\u00f3w dynamicznych aplikacji WWW. W rezultacie wyniki mog\u0105 ujawni\u0107 kod \u017ar\u00f3d\u0142owy, poniewa\u017c plik jest interpretowany jako tekst, a nie skrypt wykonywalny. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.",
      "solution": "Zak\u0142adaj, \u017ce wszystkie dane wej\u015bciowe s\u0105 szkodliwe. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Odrzucaj wszystkie dane wej\u015bciowe, kt\u00f3re nie s\u0105 \u015bci\u015ble dopasowane ze specyfikacjami lub przeobra\u017a je w takie, kt\u00f3re s\u0105 dopasowane. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nKiedy przeprowadzasz weryfikacj\u0119 danych wej\u015bciowych, bierz pod uwag\u0119 wszystkie potencjalnie wa\u017cne w\u0142a\u015bciwo\u015bci, w\u0142\u0105czaj\u0105c d\u0142ugo\u015b\u0107, pe\u0142ny zasi\u0119g akceptowalnych warto\u015bci, brakuj\u0105cych lub dodatkowych danych wej\u015bciowych, zgodno\u015b\u0107 poprzez wa\u017cne pola i dostosowanie si\u0119 do zasad sprawy. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nFor filenames, use stringent allow lists that limit the character set to be used. Je\u015bli to mo\u017cliwe, zezw\u00f3l tylko na pojedynczy \".\" znak w nazwie pliku, aby unikn\u0105\u0107 s\u0142abo\u015bci i wykluczy\u0107 separatory katalog\u00f3w, takie jak \"/\". Use an allow list of allowable file extensions.\n\nUwaga je\u015bli pr\u00f3bujesz oczy\u015bci\u0107 dane, zr\u00f3b tak, aby efekt ko\u0144cowy nie by\u0142 w formie, kt\u00f3ra mo\u017ce by\u0107 niebezpieczna. Mechanizm dezynfekcji mo\u017ce usuwa\u0107 znaki takie jak \".\" i ';' , kt\u00f3re mog\u0105 by\u0107 wymagane w przypadku niekt\u00f3rych podatno\u015bci. Osoba atakuj\u0105ca mo\u017ce pr\u00f3bowa\u0107 oszuka\u0107 mechanizm czyszcz\u0105cy w celu \"oczyszczenia\" danych do niebezpiecznej formy. Za\u0142\u00f3\u017cmy, \u017ce atakuj\u0105cy wstrzykuje \".\" wewn\u0105trz nazwy pliku (np. \"sensi.tiveFile\") i mechanizm sanityzacji usuwa znak, kt\u00f3ry daje prawid\u0142ow\u0105 nazw\u0119 pliku \"sensitiveFile\". Je\u015bli dane wej\u015bciowe zostan\u0105 teraz uznane za bezpieczne, plik mo\u017ce zosta\u0107 naruszony. \n\nDane wej\u015bciowe powinny by\u0107 dekodowane i kanonizowane do bie\u017c\u0105cej wewn\u0119trznej reprezentacji przed weryfikacj\u0105. Upewnij si\u0119, \u017ce twoja aplikacja nie dekoduje tego samego wej\u015bcia dwukrotnie. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.\n\nU\u017cyj wbudowanej funkcji kanonizacji \u015bcie\u017cki (takiej jak realpath() w C), kt\u00f3ra produkuje kanoniczn\u0105 wersj\u0119 nazwy \u015bcie\u017cki, kt\u00f3ra skutecznie usuwa sekwencje \"..\" i dowi\u0105zania symboliczne.\n\nUruchom sw\u00f3j kod u\u017cywaj\u0105c najmniejszych przywilej\u00f3w, kt\u00f3re s\u0105 wymagane do wykonania koniecznych zada\u0144. Je\u015bli mo\u017cliwe, utw\u00f3rz odizolowane konta z limitowanymi przywilejami, kt\u00f3re s\u0105 u\u017cywane tylko do pojedynczych zada\u0144. T\u0105 drog\u0105, skuteczny atak nie da gwa\u0142townie dost\u0119pu do reszty oprogramowania lub jego \u015brodowiska. Na przyk\u0142ad, baza danych aplikacji rzadko musi uruchomi\u0107 baz\u0119 danych administratora zw\u0142aszcza w codziennych operacjach.\n\nKiedy zbi\u00f3r akceptowalnych obiekt\u00f3w, takich jak nazwy plik\u00f3w lub adresy URL, jest ograniczony lub znany, utw\u00f3rz odwzorowanie ze zbioru sta\u0142ych warto\u015bci wej\u015bciowych (takich jak identyfikatory numeryczne) do rzeczywistych nazw plik\u00f3w lub adres\u00f3w URL i odrzu\u0107 wszystkie inne dane wej\u015bciowe.\n\nUruchom sw\u00f3j kod w \u015brodowisku \"wi\u0119zienia\" lub podobnym \u015brodowisku piaskownicy, kt\u00f3re wymusza \u015bcis\u0142e granice mi\u0119dzy procesem a systemem operacyjnym. Mo\u017ce to skutecznie ograniczy\u0107, kt\u00f3re pliki mog\u0105 by\u0107 dost\u0119pne w okre\u015blonym katalogu lub kt\u00f3re polecenia mog\u0105 by\u0107 wykonywane przez twoje oprogramowanie.\n\nPrzyk\u0142ady poziomu OS obejmuj\u0105ce Unix chroot jail, AppArmor, and SELinux. Na zasadach og\u00f3lnych, zarz\u0105dzany kod mo\u017ce zapewni\u0107 pewn\u0105 ochron\u0119. Na przyk\u0142ad,, java.io.FilePermission w Menad\u017cerze Ochrony Javy umo\u017cliwia ci sprecyzowa\u0107 ograniczenia odno\u015bnie operacji na plikach.\n\nTo mo\u017ce nie by\u0107 wykonalne rozwi\u0105zanie i ogranicza wp\u0142yw tylko na system operacyjny; reszta aplikacji mo\u017ce wci\u0105\u017c by\u0107 podatna na zagro\u017cenie.\n",
      "reference": "https://owasp.org/www-community/attacks/Path_Traversal\nhttps://cwe.mitre.org/data/definitions/22.html",
      "evidence": "",
      "cwe_id": "22",
      "parameter": "v",
      "attack": "/react.js",
      "wascid": "33",
      "affected_code": null,
      "source_file": null
    }
  ],
  "summary": {
    "start_time": "2025-04-13T12:55:07.401250",
    "target_url": "http://localhost:5503",
    "status": "success",
    "end_time": "2025-04-13T13:11:17.389759",
    "duration_seconds": 969,
    "total_alerts": 102,
    "risk_counts": {
      "High": 2,
      "Medium": 72,
      "Low": 22,
      "Info": 0
    },
    "passive_scan_enabled": true,
    "ajax_spider_enabled": true,
    "unique_alert_types": 10,
    "alert_categories": {
      "Security Headers": 55,
      "Other": 41,
      "Information Disclosure": 6
    },
    "vulnerabilities_with_code": 45
  },
  "scan_time": "2025-04-13T13:11:22.985999"
}