{
    "app_js": "class App {\\n    constructor(target) {\\n        this.message = 'Loading...';\\n        this.target = target;\\n        this.render();\\n        this.fetchMessage();\\n    }\\n\\n    async fetchMessage() {\\n        try {\\n            const response = await fetch('http://localhost:5002/');\\n            const data = await response.json();\\n            this.message = data.message;\\n            this.render();\\n        } catch (error) {\\n            this.message = 'Error connecting to backend';\\n            this.render();\\n        }\\n    }\\n\\n    render() {\\n        this.target.innerHTML = `\\n            <div class=\\\"app\\\">\\n                <p class=\\\"message\\\">\\${this.message}</p>\\n            </div>\\n            <style>\\n                .app {\\n                    text-align: center;\\n                    padding: 2em;\\n                }\\n                .message {\\n                    color: #444;\\n                    font-size: 1.2em;\\n                    margin: 1em;\\n                }\\n            </style>\\n        `;\\n    }\\n}\\n\\nexport default App;",
    "mod_ts": "import { serve } from \"https://deno.land/std@0.140.0/http/server.ts\";\n\nasync function handleRequest(req: Request): Promise<Response> {\n  const url = new URL(req.url);\n  \n  if (url.pathname === \"/\") {\n    return new Response(`\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Deno App</title>\n        </head>\n        <body>\n          <div id=\"app\"></div>\n          <script type=\"module\">\n            const app = document.getElementById('app');\n            import App from './src/App.js';\n            new App(app);\n          </script>\n        </body>\n      </html>\n    `, {\n      headers: { \"content-type\": \"text/html; charset=utf-8\" },\n    });\n  }\n\n  if (url.pathname.startsWith(\"/src/\")) {\n    try {\n      const file = await Deno.readFile(`.${url.pathname}`);\n      const contentType = url.pathname.endsWith(\".js\") \n        ? \"application/javascript\" \n        : \"text/plain\";\n      return new Response(file, {\n        headers: { \"content-type\": contentType },\n      });\n    } catch {\n      return new Response(\"Not found\", { status: 404 });\n    }\n  }\n\n  return new Response(\"Not found\", { status: 404 });\n}\n\nconsole.log(\"Server running at http://localhost:5174\");\nawait serve(handleRequest, { port: 5174 });",
    "app_py": "from flask import Flask, jsonify\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route('/')\ndef home():\n    return jsonify({'message': 'Hello from Flask!'})\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=5000)",
    "dockerfile_backend": "FROM python:3.10-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]",
    "dockerfile_frontend": "FROM denoland/deno:1.37.1\nWORKDIR /app\nCOPY . .\nEXPOSE 5173\nCMD [\"deno\", \"task\", \"start\"]",
    "docker_compose": "version: \"3.8\"\nservices:\n  backend:\n    build: ./backend\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - ./backend:/app\n    restart: always\n\n  frontend:\n    build: ./frontend\n    ports:\n      - \"5173:5173\"\n    volumes:\n      - ./frontend:/app\n    restart: always\n    depends_on:\n      - backend"
}
